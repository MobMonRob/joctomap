<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>es.usc.citius.lab</groupId>
	<artifactId>joctomap</artifactId>
	<version>1.7.2.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>joctomap</name>
	<url>http://maven.apache.org</url>

	<!-- Git configuration -->
	<scm>
		<connection>scm:git:https://forxa.citius.usc.es/adrian.gonzalez/joctomap.git</connection>
		<developerConnection>scm:git:https://forxa.citius.usc.es/adrian.gonzalez/joctomap.git</developerConnection>
		<url>scm:git:https://forxa.citius.usc.es/adrian.gonzalez/joctomap.git</url>
	</scm>
        
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<main.class>es.usc.citius.lab.joctomap.Main</main.class>
	</properties>


	<dependencies>
		<!-- Apache commons CLI -->
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>es.usc.citius.lab</groupId>
			<artifactId>motionplanner-core</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>
		<!-- JUnit 4 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Configure to use JDK 1.6 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- Put main class in MANIFEST -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
                                <version>2.6</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>${main.class}</mainClass>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
						</manifest>
					</archive>
				</configuration>
			</plugin>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-dependency-plugin</artifactId>
                            <version>2.10</version>
                            <executions>
                              <execution>
                                <id>copy-dependencies</id>
                                <phase>package</phase>
                                <goals>
                                  <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                  <outputDirectory>${project.build.directory}/lib/</outputDirectory>
                                  <overWriteReleases>false</overWriteReleases>
                                  <overWriteSnapshots>true</overWriteSnapshots>
                                </configuration>
                              </execution>
                            </executions>
                          </plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<!-- Run compile.sh to build Octomap, also build *.cpp files and obtain 
						*.so -->
					<execution>
						<id>compile</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>bash</executable>
							<arguments>
								<argument>${basedir}/compile.sh</argument>
								<argument>${jdk}</argument>
							</arguments>
                                                        <successCodes>
                                                            <successCode>0</successCode>
                                                        </successCodes>
						</configuration>
					</execution>
					<!-- Run clean.sh to remove binary compiled files in C/C++ -->
					<execution>
						<id>clean</id>
						<phase>clean</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>bash</executable>
							<arguments>
								<argument>${basedir}/clean.sh</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<mainClass>${main.class}</mainClass>
				</configuration>
			</plugin>
			<!-- Junit configuration to add the dynamic library to the path -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.17</version>
				<configuration>
					<forkCount>1</forkCount>
					<reuseForks>true</reuseForks>
					<!-- Suite tests to be included -->
					<includes>
						<include>**/NativeTests.java</include>
						<include>**/JavaTests.java</include>
					</includes>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
